// Generated by CoffeeScript 1.7.1
(function() {
  var addMaterial, addMaterialUpdateMeter, aggregate_nipples, approvedAdditional, backModify, backOrders, calMeter, changeRadio, changeRdoNip, changeSelectDeductiveMeter, chkNippChange, copyBack, createTableDeductive, deductiveOneCancel, delMaterials, delPlane, deleteMaterialUpdateMeter, delete_all_temp_nipples, deleteallnipmat, dellAllMaterial, editBrandandModel, editMaterials, generateOrders, listMaterials, list_temp_nipples, loadMaterials, loadSecandSub, loadSector, nextOrders, openAddMaterial, openBrand, openModel, panelPlanes, pasteMaterials, saved_or_update_nipples, selectChoiseOrder, showHideTbody, showListNipp, showModify, showOrders, show_edit_nipple, showaddtableoutdeductivemeter, startModidfy, updateCommentMat, updateMaterialUpdateMeter, uploadPlane, valMax, valQuantityPreOrders, validBlurNumber, validOrders, viewFull;

  $(document).ready(function() {
    $(".panel-add,input[name=read], .step-second, .body-subandsec, .body-sector, .body-materials, .ordersbedside, .panel-modify, .btn-update-meter-cancel, .btn-show-materials-meter, .btn-deductivo-meter, .btn-upload-plane-meter, .btn-save-modify-meter, .deductive-one").hide();
    $("input[name=traslado]").datepicker({
      "dateFormat": "yy-mm-dd",
      changeMonth: true,
      changeYear: true,
      minDate: "0"
    });
    $(".panel-add-mat, .view-full").hide();
    $(".btn-show-mat, .btn-show-materials-meter").on("click", openAddMaterial);
    $("input[name=plane]").on("change", uploadPlane);
    $(".btn-show-planes").on("click", panelPlanes);
    $("[name=show-full]").on("click", viewFull);
    $("[name=plane-del]").on("click", delPlane);
    $(".btn-add").on("click", addMaterial);
    $(".btn-show-del").on("click", dellAllMaterial);
    $(".btn-new-brand").on("click", openBrand);
    $(".btn-new-model").on("click", openModel);
    $("[name=show-plane], .btn-upload-plane-meter").on("click", function(event) {
      return $("input[name=plane]").click();
    });
    $(document).on("click", ".btn-del-mat", delMaterials);
    $(document).on("click", ".btn-show-secsub", loadSecandSub);
    $(document).on("click", ".btn-show-subproject_id", loadSector);
    $(document).on("click", ".btn-show-sector_id", loadMaterials);
    $(".btn-save-edit").on("click", editMaterials);
    $(".btn-show-copy").on("click", function() {
      $(".mcopy").modal("show");
      $.getJSON("/json/projects/lists/", {
        "sector": true,
        "pro": $("input[name=pro]").val(),
        "sub": $("input[name=sub]").val()
      }, function(response) {
        var $sec, template, x;
        if (response.status) {
          template = "<a class=\"list-group-item\"> <button class=\"btn badge btn-primary btn-show-sector_id\" value=\"{{ sector_id }}\" data-sub=\"{{ subproject_id }}\" data-pro=\"{{ project_id }}\" data-body=\"projects\"><span class=\"glyphicon glyphicon-chevron-right\"></span></button> {{ name }} </a>";
          $sec = $("ul.sector-local");
          $sec.empty();
          for (x in response.sector) {
            $sec.append(Mustache.render(template, response.sector[x]));
          }
        }
      });
    });
    $(".btn-back").on("click", copyBack);
    $(".btn-paste").on("click", pasteMaterials);
    $("input[name=rcp]").on("change", changeRadio);
    $(document).on("click", ".btn-show-edit", function() {
      var $materials;
      $(".btn-save-edit").val(this.value);
      $materials = $("." + this.value + " > td");
      editBrandandModel($materials.eq(5).text(), $materials.eq(6).text());
      $(".text-edit").text("" + ($materials.eq(2).text()) + " " + ($materials.eq(3).text()));
      $("input[name=edit-materials]").val($materials.eq(1).text());
      $("input[name=edit-quantity]").val($materials.eq(7).text());
      $("input[name=edit-price]").val($materials.eq(8).text());
      return $(".medit").modal("toggle");
    });
    $("select[name=edit-brand]").on("change", function(event) {
      return $.getJSON("/json/model/list/option/", {
        "brand": $("select[name=edit-brand]").val()
      }, function(response) {
        var $model, template, x;
        if (response.status) {
          template = "<option value=\"{{ model_id }}\" title>{{ model }}</option>";
          $model = $("select[name=edit-model]");
          $model.empty();
          for (x in response.model) {
            if (model === response.model[x].model) {
              $model.append(Mustache.render(template.replace("title", "selected"), response.model[x]));
            } else {
              $model.append(Mustache.render(template, response.model[x]));
            }
          }
        }
      });
    });
    $("input[name=proid], input[name=proname]").on("keyup", function(event) {
      var data, key;
      key = window.Event ? event.keyCode : event.which;
      if (key === 13) {
        data = new Object();
        if (this.name === "proid") {
          data.code = $("input[name=proid]").val();
        } else {
          data.name = $("input[name=proname]").val();
        }
        data.project = true;
        $.getJSON("/json/projects/lists/", data, function(response) {
          var $tb, template, x;
          if (response.status) {
            template = "<tr><td>{{ project_id }}</td><td>{{ name }}</td><td><button class=\"btn badge btn-primary btn-xs btn-show-secsub\" value=\"{{ project_id }}\" data-body=\"projects\"><span class=\"glyphicon glyphicon-chevron-right\"></span></button></td></tr>";
            $tb = $(".table-projects > tbody");
            $tb.empty();
            for (x in response.project) {
              $tb.append(Mustache.render(template, response.project[x]));
            }
          }
        });
      }
    });
    $("input[name=choice]").on("change", selectChoiseOrder);
    $(document).on("click", ".btn-nip-edit", show_edit_nipple);
    $(".btn-show-orders").on("click", showOrders);
    $(document).on("click", ".btn-append-list-nipp", showListNipp);
    $(document).on("click", ".showhidenipp", showHideTbody);
    $(document).on("change", "input[name=rdonipp]", changeRdoNip);
    $(document).on("change", ".chknipp", chkNippChange);
    $(document).on("blur", ".valquamax", valMax);
    $(".btn-next-order").on("click", nextOrders);
    $(".btn-back-order").on("click", backOrders);
    $(".comment-mat").on("blur", updateCommentMat);
    $(".btn-generate-orders").on("click", generateOrders);
    $("#orderf").click(function() {
      return $("#orderfile").click();
    });
    $(".btn-update-meter").on("click", showModify);
    $(".btn-update-meter-cancel").on("click", backModify);
    $(".btn-reload-modify").on("click", startModidfy);
    $(document).on("blur", "table.table-modify > tbody > tr > td > input[type=number]", validBlurNumber);
    $(document).on("click", ".btn-update-update", updateMaterialUpdateMeter);
    $(document).on("click", ".btn-delete-update", deleteMaterialUpdateMeter);
    $(".btn-add-update-meter").on("click", addMaterialUpdateMeter);
    $(".btn-approval-addcional").on("click", approvedAdditional);
    $(".btn-deductivo-meter").on("click", createTableDeductive);
    $(".btn-deductive-one-cancel").on("click", deductiveOneCancel);
    $(document).on("click", ".btn-deductive-meter-select", showaddtableoutdeductivemeter);
    tinymce.init({
      selector: "textarea[name=obser]",
      theme: "modern",
      menubar: false,
      statusbar: false,
      plugins: "link contextmenu",
      fullpage_default_doctype: "<!DOCTYPE html>",
      font_size_style_values: "10px,12px,13px,14px,16px,18px,20px",
      toolbar1: "styleselect | fontsizeselect | | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent |",
      toolbar2: "undo redo | bold italic |"
    });
  });

  loadSecandSub = function(event) {
    $(".body-projects, .body-sector, .body-materials").hide();
    $(".body-subandsec").show(600);
    $(".btn-back").val($(this).attr("data-body"));
    $.getJSON("/json/projects/lists/", {
      "pro": this.value,
      "subproject": true,
      "sector": true
    }, function(response) {
      var $item, template, x;
      if (response.status) {
        template = "<a class=\"list-group-item\"> <button class=\"btn badge btn-primary btn-show-sector_id\" value=\"{{ sector_id }}\" data-sub=\"{{ subproject_id }}\" data-pro=\"{{ project_id }}\" data-body=\"subandsec\"><span class=\"glyphicon glyphicon-chevron-right\"></span></button> {{ name }} </a>";
        $item = $("ul.sectors");
        $item.empty();
        for (x in response.sector) {
          $item.append(Mustache.render(template, response.sector[x]));
        }
        $item = $("ul.subprojects");
        template = template.replace("sector_id", "subproject_id", 2);
        $item.empty();
        for (x in response.subproject) {
          $item.append(Mustache.render(template, response.subproject[x]));
        }
      }
    });
  };

  loadSector = function(event) {
    $(".body-projects, .body-subandsec, .body-materials").hide();
    $(".body-sector").show(600);
    $(".btn-back").val($(this).attr("data-body"));
    $.getJSON("/json/projects/lists/", {
      "pro": $(this).attr("data-pro"),
      "sub": $(this).attr("data-sub"),
      "sector": true
    }, function(response) {
      var $item, template, x;
      if (response.status) {
        template = "<a class=\"list-group-item\"> <button class=\"btn badge btn-primary btn-show-sector_id\" value=\"{{ sector_id }}\" data-sub=\"{{ subproject_id }}\" data-pro=\"{{ project_id }}\" data-body=\"sector\"><span class=\"glyphicon glyphicon-chevron-right\"></span></button> {{ name }} </a>";
        $item = $("ul.list-sector");
        $item.empty();
        for (x in response.sector) {
          $item.append(Mustache.render(template, response.sector[x]));
        }
      }
    });
  };

  loadMaterials = function(event) {
    $(".body-projects, .body-subandsec, .body-sector").hide();
    $(".body-materials").show(600);
    $(".btn-back").val($(this).attr("data-body"));
    $("input[name=cpro]").val($(this).attr("data-pro"));
    $("input[name=csub]").val($(this).attr("data-sub"));
    $("input[name=csec]").val(this.value);
    $.getJSON("/json/projects/lists/", {
      "pro": $(this).attr("data-pro"),
      "sub": $(this).attr("data-sub"),
      "sec": this.value,
      "materials": true
    }, function(response) {
      var $item, template, x;
      if (response.status) {
        template = "<tr id=\"{{ materials_id }}-copy\"><td>{{ item }}</td><td><input type=\"checkbox\" name=\"copy\" value=\"{{ materials_id }}-copy\"></td><td>{{ materials_id }}</td><td>{{ name }}</td><td>{{ measure }}</td><td>{{ unit }}</td><td>{{ quantity }}</td><td>{{ price }}</td></tr>";
        $item = $("table.table-copy > tbody");
        $item.empty();
        for (x in response.materials) {
          response.materials[x].item = parseInt(x) + 1;
          $item.append(Mustache.render(template, response.materials[x]));
        }
      }
    });
  };

  copyBack = function(event) {
    if ($(".body-sector").is(":visible")) {
      this.value = "subandsec";
    } else if ($(".body-sector").is(":visible")) {
      this.value = "projects";
    } else if ($(".body-subandsec").is(":visible")) {
      this.value = "projects";
    }
    if ($(".body-projects").is(":visible")) {
      $(".body-projects").hide();
    }
    if ($(".body-subandsec").is(":visible")) {
      $(".body-subandsec").hide();
    }
    if ($(".body-sector").is(":visible")) {
      $(".body-sector").hide();
    }
    if ($(".body-materials").is(":visible")) {
      $(".body-materials").hide();
    }
    $(".body-" + this.value).show(600);
  };

  editBrandandModel = function(brand, model) {
    $.getJSON("/json/brand/list/option/", function(response) {
      var $brand, template, x;
      if (response.status) {
        template = "<option value=\"{{ brand_id }}\" title>{{ brand }}</option>";
        $brand = $("select[name=edit-brand]");
        $brand.empty();
        for (x in response.brand) {
          if (brand === response.brand[x].brand) {
            $brand.append(Mustache.render(template.replace("title", "selected"), response.brand[x]));
          } else {
            $brand.append(Mustache.render(template, response.brand[x]));
          }
        }
        $.getJSON("/json/model/list/option/", {
          "brand": $("select[name=edit-brand]").val()
        }, function(response) {
          var $model;
          if (response.status) {
            template = "<option value=\"{{ model_id }}\" title>{{ model }}</option>";
            $model = $("select[name=edit-model]");
            $model.empty();
            for (x in response.model) {
              if (model === response.model[x].model) {
                $model.append(Mustache.render(template.replace("title", "selected"), response.model[x]));
              } else {
                $model.append(Mustache.render(template, response.model[x]));
              }
            }
          }
        });
      }
    });
  };

  openBrand = function() {
    var interval, url, win;
    url = "/brand/new/";
    win = window.open(url, "Popup", "toolbar=no, scrollbars=yes, resizable=no, width=400, height=600");
    interval = window.setInterval(function() {
      if (win === null || win.closed) {
        window.clearInterval(interval);
        searchBrandOption();
      }
    }, 1000);
    return win;
  };

  openModel = function() {
    var interval, url, win;
    url = "/model/new/";
    win = window.open(url, "Popup", "toolbar=no, scrollbars=yes, resizable=no, width=400, height=600");
    interval = window.setInterval(function() {
      if (win === null || win.closed) {
        window.clearInterval(interval);
        searchModelOption();
      }
    }, 1000);
    return win;
  };

  openAddMaterial = function(event) {
    event.preventDefault();
    $(".panel-add-mat").toggle(function() {
      if ($(this).is(":hidden")) {
        return $(".btn-show-mat").find("span").removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down");
      } else {
        return $(".btn-show-mat").find("span").removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-up");
      }
    });
  };

  uploadPlane = function(event) {
    var data;
    if (this.files[0] !== null) {
      data = new FormData();
      data.append("type", "plane");
      data.append("files", this.files[0]);
      data.append("proyecto", $("input[name=pro]").val());
      data.append("subproyecto", $("input[name=sub]").val());
      data.append("sector", $("input[name=sec]").val());
      data.append("csrfmiddlewaretoken", $("[name=csrfmiddlewaretoken]").val());
      $.ajax({
        data: data,
        url: "",
        type: "POST",
        dataType: "json",
        cache: false,
        processData: false,
        contentType: false,
        success: function(response) {
          if (response.status) {
            return location.reload();
          } else {
            return $().toastmessage("showErrorToast", "No se ha cargado un archivo.");
          }
        }
      });
    } else {
      $().toastmessage("showWarningToast", "No se ha cargado un archivo.");
    }
  };

  panelPlanes = function(event) {
    var btn;
    btn = this;
    $(".panel-planes > .panel-body").toggle(function() {
      if ($(".panel-planes > .panel-body").is(":hidden")) {
        $(btn).find("span").removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down");
      } else {
        $(btn).find("span").removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-up");
      }
    });
  };

  viewFull = function(event) {
    var btn;
    btn = this;
    $(".view-full").toggle(function() {
      if ($(this).is(":hidden")) {
        $(".navbar").show("blind", 600);
      } else {
        $(".navbar").hide("blind", 600);
        $("#planefull").attr("src", btn.value);
      }
    });
  };

  delPlane = function(event) {
    var data;
    data = new Object();
    data.type = "delplane";
    data.files = this.value;
    data.pro = $("input[name=pro]").val();
    data.sub = $("input[name=sub]").val();
    data.sec = $("input[name=sec]").val();
    data.csrfmiddlewaretoken = $("[name=csrfmiddlewaretoken]").val();
    $().toastmessage("showToast", {
      "text": "Desea eliminar el <q>Plano</q>?",
      "type": "confirm",
      "sticky": true,
      buttons: [
        {
          value: 'Si'
        }, {
          value: 'No'
        }
      ],
      success: function(result) {
        if (result === "Si") {
          return $.post("", data, function(response) {
            if (response.status) {
              return location.reload();
            } else {
              return $().toastmessage("showWarningToast", "Error, al eliminar el plano.");
            }
          });
        }
      }
    });
  };

  addMaterial = function(event) {
    var currency, data, purchase;
    data = new Object();
    data.proyecto = $("input[name=pro]").val();
    data.subproyecto = $("input[name=sub]").val();
    data.sector = $("input[name=sec]").val();
    data.csrfmiddlewaretoken = $("[name=csrfmiddlewaretoken]").val();
    data.type = "add";
    data.materiales = $(".id-mat").text();
    data.cantidad = $("input[name=cantidad]").val();
    data.precio = $("input[name=precio]").val();
    data.brand = $("select[name=brand]").val();
    data.model = $("select[name=model]").val();
    if (data.materiales !== "" && data.cantidad !== "" && data.precio !== "") {
      currency = $("select[name=moneda]").val();
      if ($("[name=currency]").val() !== currency) {
        if ($("[name=" + ($("[name=currency]").val()) + "]").val() === null || $("[name=" + ($("[name=currency]").val()) + "]").val() === void 0) {
          $().toastmessage("showWarningToast", "El tipo de cambio no esta registrado.");
          return false;
        }
        purchase = $("[name=" + ($("[name=currency]").val()) + "]").val();
        data['precio'] = data['precio'] * parseFloat(purchase);
      }
      $.post("", data, function(response) {
        if (response.status) {
          return listMaterials();
        } else {
          return $().toastmessage("showErrorToast", "No found Transaction " + response.raise);
        }
      }, "json");
      return;
    } else {
      $().toastmessage("showWarningToast", "Existe campos vacio.");
    }
  };

  listMaterials = function() {
    var data;
    data = new Object();
    data.pro = $("input[name=pro]").val();
    data.sub = $("input[name=sub]").val();
    data.sec = $("input[name=sec]").val();
    data.type = "list";
    $.getJSON("", data, function(response) {
      var $tb, template, x, _results;
      if (response.status) {
        template = "<tr class=\"{{ materials_id }}-{{ id }}\"> <td>{{ item }}</td> <td>{{ materials_id }}</td> <td>{{ name }}</td> <td>{{ measure }}</td> <td>{{ unit }}</td> <td>{{ brand }}</td> <td>{{ model }}</td> <td>{{ quantity }}</td> <td>{{ price }}</td> <td> <button class=\"btn btn-xs btn-link text-green btn-show-edit\" value=\"{{ materials_id }}-{{ id }}\"> <span class=\"glyphicon glyphicon-pencil\"></span> </button> </td> <td> <button class=\"btn btn-xs btn-link text-red btn-del-mat\" value=\"{{ materials_id }}-{{ id }}\"> <span class=\"glyphicon glyphicon-trash\"></span> </button> </td> </tr>";
        $tb = $(".table-details > tbody");
        $tb.empty();
        _results = [];
        for (x in response.list) {
          response.list[x].item = parseInt(x) + 1;
          _results.push($tb.append(Mustache.render(template, response.list[x])));
        }
        return _results;
      }
    });
  };

  delMaterials = function(event) {
    var $materials, btn;
    btn = this.value;
    $materials = $("." + this.value + " > td");
    $().toastmessage("showToast", {
      "text": "Desea eliminar " + ($materials.eq(2).text()) + " " + ($materials.eq(3).text()) + "?",
      "sticky": true,
      "type": "confirm",
      "buttons": [
        {
          value: 'Si'
        }, {
          value: 'No'
        }
      ],
      "success": function(result) {
        var data;
        if (result === "Si") {
          data = new Object();
          data.pro = $("input[name=pro]").val();
          data.sub = $("input[name=sub]").val();
          data.sec = $("input[name=sec]").val();
          data.materials = $materials.eq(1).text();
          data.csrfmiddlewaretoken = $("[name=csrfmiddlewaretoken]").val();
          data.type = "del";
          $.post("", data, function(response) {
            if (response.status) {
              $("." + btn).remove();
              $(".table-details > tbody > tr").each(function(index, element) {
                return element.find("td").eq(0).text(index + 1);
              });
            } else {
              return $().toastmessage("showWarningToast", "No se elimino el material.");
            }
          });
        }
      }
    });
  };

  editMaterials = function(event) {
    var btn, currency, data, purchase;
    btn = this;
    data = new Object();
    data.proyecto = $("input[name=pro]").val();
    data.subproyecto = $("input[name=sub]").val();
    data.sector = $("input[name=sec]").val();
    data.materiales = $("input[name=edit-materials]").val();
    data.cantidad = $("input[name=edit-quantity]").val();
    data.precio = $("input[name=edit-price]").val();
    data.brand = $("select[name=edit-brand]").val();
    data.model = $("select[name=edit-model]").val();
    data.csrfmiddlewaretoken = $("[name=csrfmiddlewaretoken]").val();
    data.type = "add";
    data.edit = true;
    if (data.cantidad !== "" && data.precio !== "") {
      currency = $("select[name=moneda-e]").val();
      if ($("[name=currency]").val() !== currency) {
        if ($("[name=" + ($("[name=currency]").val()) + "]").val() === null || $("[name=" + ($("[name=currency]").val()) + "]").val() === void 0) {
          $().toastmessage("showWarningToast", "El tipo de cambio no esta registrado.");
          return false;
        }
        purchase = $("[name=" + ($("[name=currency]").val()) + "]").val();
        data.precio = data.precio * purchase;
      }
      $.post("", data, function(response) {
        var $materials;
        if (response.status) {
          $materials = $("." + btn.value + " > td");
          $materials.eq(5).text($("select[name=edit-brand]").text());
          $materials.eq(6).text($("select[name=edit-model]").text());
          $materials.eq(7).text(data.cantidad);
          $materials.eq(8).text(data.precio);
          return $(".medit").modal("toggle");
        } else {
          return $().toastmessage("showWarningToast", "No se edito el material.");
        }
      });
    } else {
      $().toastmessage("showWarningToast", "Existen campos vacios o menores a uno.");
    }
  };

  dellAllMaterial = function(event) {
    $().toastmessage("showToast", {
      "text": "Desea eliminar toda la lista de materiales?",
      "sticky": true,
      "type": "confirm",
      "buttons": [
        {
          value: 'Si'
        }, {
          value: 'No'
        }
      ],
      "success": function(result) {
        var data;
        if (result === "Si") {
          data = new Object();
          data.pro = $("input[name=pro]").val();
          data.sub = $("input[name=sub]").val();
          data.sec = $("input[name=sec]").val();
          data.csrfmiddlewaretoken = $("[name=csrfmiddlewaretoken]").val();
          data.type = "killdata";
          $.post("", data, function(response) {
            if (response.status) {
              return location.reload();
            } else {
              return $().toastmessage("showWarningToast", "No se elimino la lista de materiales.");
            }
          });
        }
      }
    });
  };

  pasteMaterials = function() {
    var $cp, arr, counter, data;
    console.log("here Click");
    $cp = $("input[name=copy]");
    data = new Object();
    arr = new Array();
    counter = 0;
    $cp.each(function(index, element) {
      var $td;
      if (this.checked) {
        counter += 1;
        $td = $("#" + this.value + " > td");
        arr.push($td.eq(2).text());
      }
    });
    data.materials = arr;
    data.paste = true;
    data.pro = $("input[name=pro]").val();
    data.sub = $("input[name=sub]").val();
    data.sec = $("input[name=sec]").val();
    data.cpro = $("input[name=cpro]").val();
    data.csub = $("input[name=csub]").val();
    data.csec = $("input[name=csec]").val();
    data.csrfmiddlewaretoken = $("input[name=csrfmiddlewaretoken]").val();
    console.log(data);
    if (counter > 0 && counter <= $cp.length) {
      $.post("/json/projects/lists/", data, function(response) {
        console.log(response);
        if (response.status) {
          return location.reload();
        } else {
          return $().toastmessage("showErrorToast", "No found Transaction");
        }
      }, "json");
    }
  };

  changeRadio = function(event) {
    $(this).each(function(index, element) {
      var rdo;
      if (this.checked) {
        rdo = this;
        return $("input[name=copy]").each(function(index, element) {
          return this.checked = rdo.value === "all" ? "checked" : "";
        });
      }
    });
  };

  selectChoiseOrder = function(event) {
    event.preventDefault();
    $(this).each(function() {
      var chk;
      if (this.checked) {
        chk = this;
        return $("input[name=mats]").each(function(index, element) {
          this.checked = Boolean(parseInt(chk.value));
        });
      }
    });
  };

  list_temp_nipples = function(idmat) {
    var data;
    data = {
      "list-nip": true,
      "pro": $("input[name=pro]").val(),
      "sub": $("input[name=sub]").val(),
      "sec": $("input[name=sec]").val(),
      "mat": idmat
    };
    $.getJSON("", data, function(response) {
      var $tb, template, x;
      if (response.status) {
        template = "<tr class=\"trnip{{ id }}\"> <td>{{ quantity }}</td> <td>{{ name }}</td> <td>{{ diameter }}</td> <td>x</td> <td>{{ measure }}</td> <td>{{ unit }}</td> <td>{{ comment }}</td> <td> <button class=\"btn btn-xs btn-link text-green btn-nip-edit {{ view }}\" data-edit-nip=\"{{ materials }}\" value=\"{{ id }}\" data-tag=\"{{ tag }}\"> <span class=\"glyphicon glyphicon-pencil\"></span> </button> </td> <td> <button class=\"btn btn-xs btn-link btn-nip-del text-red {{ view }}\" data-del-nip=\"{{ materials }}\" value=\"{{ id }}\"> <span class=\"glyphicon glyphicon-trash\"></span> </button> </td> </tr>";
        $tb = $("#des" + idmat + " > div > table > tbody");
        $tb.empty();
        for (x in response.list) {
          response.list[x].item = parseInt(x) + 1;
          $tb.append(Mustache.render(template, response.list[x]));
        }
        $(".in" + idmat).text(response.ingress);
        $(".res" + idmat).text(($(".totr" + idmat).val() * 100) - response.ingress);
      }
    });
  };

  aggregate_nipples = function(idmat) {
    $(".nv" + idmat).val("");
    $(".mt" + idmat).val("");
    $(".tn" + idmat).val("");
    $(".nc" + idmat).text("");
    $(".update-quantity-" + idmat).val("");
    $(".update-id-" + idmat).val("");
    $(".tn" + idmat + ",.mt" + idmat + ",.nv" + idmat + ",.nc" + idmat + ",.bn" + idmat).attr("disabled", false);
  };

  saved_or_update_nipples = function(idmat) {
    var data, pass;
    if (idmat.length === 15) {
      data = new Object();
      pass = false;
      data.addnip = true;
      data.proyecto = $("input[name=pro]").val();
      data.subproyecto = $("input[name=sub]").val();
      data.sector = $("input[name=sec]").val();
      data.materiales = idmat;
      data.metrado = parseFloat(parseInt($(".mt" + idmat).val()));
      data.tipo = $(".tn" + idmat).val();
      data.cantidad = parseFloat(parseInt($(".nv" + idmat).val()));
      data.cantshop = parseFloat(parseInt($(".nv" + idmat).val()));
      data.comment = $($(".nc" + idmat)).val();
      data.csrfmiddlewaretoken = $("input[name=csrfmiddlewaretoken]").val();
      if ($("input.update-id-" + idmat).val() !== "") {
        data.id = $("input.update-id-" + idmat).val();
        pass = (data.metrado * data.cantidad) <= (parseFloat(parseInt($(".res" + idmat).text()) + parseFloat(parseInt($(".update-quantity-" + idmat).val())))) ? true : false;
      } else {
        pass = (data.metrado * data.cantidad) <= parseFloat(parseInt($(".res" + idmat).text())) ? true : false;
      }
      if (pass) {
        $.post("", data, function(response) {
          if (response.status) {
            $(".tn" + idmat + ",.mt" + idmat + ",.nv" + idmat + ",.nc" + idmat + ",.bn" + idmat).attr("disabled", true);
            $(".update-quantity-" + idmat).val("");
            $(".update-id-" + idmat).val("");
            return list_temp_nipples(idmat);
          }
        });
        return;
      } else {
        $().toastmessage("showWarningToast", "Cantidad es mayor a la establecida.");
      }
    } else {
      $().toastmessage("showWarningToast", "Código incorrecto");
    }
  };

  show_edit_nipple = function() {
    var $td, idmat, tipo;
    idmat = $(this).attr("data-edit-nip");
    tipo = new Object();
    $(".tn" + idmat).find("option").each(function(index, element) {
      var text;
      text = $.trim(element.innerHTML);
      text = text.split("-");
      if (text.length === 2) {
        text = text[1];
      } else if (text.length === 3) {
        text = text[1] + "-" + text[2];
      }
      tipo[text] = element.value;
    });
    $(".update-id-" + idmat).val(this.value);
    $td = $(".trnip" + this.value + " > td");
    $(".nv" + idmat).val($td.eq(0).text());
    $(".mt" + idmat).val($td.eq(4).html());
    $(".tn" + idmat).val(tipo[$td.eq(1).text()]);
    $(".nc" + idmat).text($td.eq(6).text());
    $(".update-quantity-" + idmat).val(parseFloat($td.eq(0).text()) * parseFloat($td.eq(4).text()));
    $(".tn" + idmat + ",.mt" + idmat + ",.nv" + idmat + ",.nc" + idmat + ",.bn" + idmat).attr("disabled", false);
  };

  delete_all_temp_nipples = function(idmat) {
    if (idmat !== "") {
      $().toastmessage("showToast", {
        text: "Desea eliminar todo los niples de la tuberia?",
        type: "confirm",
        sticky: true,
        buttons: [
          {
            value: 'Si'
          }, {
            value: 'No'
          }
        ],
        success: function(result) {
          var data;
          if (result === "Si") {
            data = new Object();
            data.addnip = true;
            data.proyecto = $("input[name=pro]").val();
            data.subproyecto = $("input[name=sub]").val();
            data.sector = $("input[name=sec]").val();
            data.materiales = idmat;
            $.post("", data, function(response) {
              if (response.status) {
                return list_temp_nipples(idmat);
              }
            }, "json");
          }
        }
      });
      return;
    } else {
      $().toastmessage("showWarningToast", "Código de material incorrecto.");
    }
  };

  deleteallnipmat = function() {};

  showOrders = function() {
    var $tb, arr, counter, data, template, x;
    counter = 0;
    data = new Object();
    arr = new Array();
    $("input[name=mats]").each(function(index, element) {
      var $td;
      if (this.checked) {
        counter += 1;
        $td = $("." + this.value + " > td");
        return arr.push({
          "item": counter,
          "materials": $td.eq(2).text(),
          'name': $td.eq(3).text(),
          'measure': $td.eq(4).text(),
          'unit': $td.eq(5).text(),
          'brand': $td.eq(6).text(),
          'model': $td.eq(7).text(),
          'quantity': $td.eq(8).text()
        });
      }
    });
    data.list = arr;
    if (counter > 0) {
      $tb = $(".torders > tbody.materials");
      $tb.empty();
      for (x in data.list) {
        template = "<tr> <td>{{ item }}</td> <td>{{ materials }}</td> <td>{{ name }}</td> <td>{{ measure }}</td> <td>{{ unit }}</td> <td>{{ brand }}</td> <td>{{ model }}</td> <td>{{ quantity }}</td> <td> {{! input }} </td> </tr>";
        if ($.trim(data.list[x].materials.substring(0, 3)) === "115") {
          template = template.replace("{{! input }}", "<div class=\"input-group\"> <input type=\"number\" class=\"form-control input-sm meter{{ materials }} quantityOrders\" data-mat=\"{{ materials }}\" readonly=\"readonly\"> <span class=\"input-group-btn\"> <button class=\"btn btn-default btn-sm btn-append-list-nipp\" value=\"{{ materials }}\" type=\"button\"> <span class=\"glyphicon glyphicon-list\"></span> </button> </span> </div>");
        } else {
          template = template.replace("{{! input }}", "<input type=\"number\" min=\"1\" max=\"{{ quantity }}\" value=\"{{ quantity }}\" data-mat=\"{{ materials }}\" class=\"form-control input-sm valquamax quantityOrders\">");
        }
        $tb.append(Mustache.render(template, data.list[x]));
      }
      $("#morders").modal("toggle");
    } else {
      $().toastmessage("showWarningToast", "Tienes que seleccionar por lo menos un material.");
    }
  };

  showListNipp = function() {
    var $mat, $tb, $tr, arr, counter, dat, data, idmat, template, two, x;
    idmat = this.value;
    data = new Object();
    arr = new Array();
    counter = 0;
    if ($("table.torders > tbody.nipples > tr.prenip" + idmat).length === 0) {
      $tr = $("div#des" + this.value + " > div > table > tbody.tb > tr");
      if ($tr.length === 0) {
        list_temp_nipples(this.value);
      }
      $tr.each(function() {
        var $td;
        $td = $(this).find("td");
        counter += 1;
        arr.push({
          "item": counter,
          "quantity": $td.eq(0).text(),
          "name": $td.eq(1).text(),
          "diameter": $td.eq(2).text(),
          "measure": $td.eq(4).text(),
          "unit": "cm",
          "comment": $td.eq(6).text(),
          "id": $td.eq(7).find("button").val(),
          "tag": $td.eq(7).find("button").attr("data-tag")
        });
      });
    } else {
      console.log("row exists");
      counter = 1;
    }
    if (counter > 0) {
      if (arr.length > 0) {
        data.nip = arr;
        $tb = $(".torders > tbody.nipples");
        template = "<tr class=\"" + idmat + "nip{{ id }}\"><td><input type=\"checkbox\" class=\"chknipp chknipp" + idmat + "\" value=\"" + idmat + "nip{{ id }}\" value=\"{{ id }}\"></td><td><input type=\"number\" class=\"form-control input-sm valquamax\" style=\"width:90px;\" data-id=\"{{ id }}\" min=\"1\" max=\"{{ quantity }}\" value=\"{{ quantity }}\" data-mat=\"" + idmat + "\" disabled></td><td>{{ quantity }}</td><td>{{ name }}</td><td>{{ diameter }}</td><td>x</td><td>{{ measure }}</td><td>{{ unit }}</td><td>{{ comment }}</td></tr>";
        template - (two = "<tr class=\"" + idmat + "nip{{ id }}\"><td><input type=\"checkbox\" class=\"chknipp chknipp" + idmat + "\" value=\"" + idmat + "nip{{ id }}\" value=\"{{ id }}\" disabled></td><td><input type=\"number\" class=\"form-control input-sm valquamax\" style=\"width:90px;\" data-id=\"{{ id }}\" min=\"1\" max=\"{{ quantity }}\" value=\"{{ quantity }}\" data-mat=\"" + idmat + "\" disabled></td><td>{{ quantity }}</td><td>{{ name }}</td><td>{{ diameter }}</td><td>x</td><td>{{ measure }}</td><td>{{ unit }}</td><td>{{ comment }}</td></tr>");
        dat = "";
        for (x in data.nip) {
          if (data.nip[x].tag === "2") {
            dat = dat.concat(Mustache.render(template - two, data.nip[x]));
          } else {
            dat = dat.concat(Mustache.render(template, data.nip[x]));
          }
        }
        $mat = $("." + idmat + " > td");
        template = "<tr class=\"prenip" + idmat + "\"><td colspan=\"9\"> <table class=\"table table-condensed table" + idmat + "\"> <thead> <tr> <td colspan=\"8\">" + ($mat.eq(3).text()) + " - " + ($mat.eq(4).text()) + " <div class=\"form-group\">seleccionar : <label class=\"radio-inline\"><input type=\"radio\" data-mat=\"" + idmat + "\" value=\"1\" name=\"rdonipp\"> todo</label> <label class=\"radio-inline\"><input type=\"radio\" data-mat=\"" + idmat + "\" value=\"0\" name=\"rdonipp\"> ninguno.</label> </div></td> </tr> <tr><th><button value=\"" + idmat + "\" class=\"btn btn-xs btn-link showhidenipp\"><span class=\"glyphicon glyphicon-chevron-up\"></span></button></th><th>Pedido</th><th>Cantidad</th><th>Tipo</th><th>Diametro</th><th></th><th>Medida</th><th>Unidad</th></tr> </thead> <tbody>{rows}</tbody> </table> </td></tr>";
        template = template.replace("{rows}", dat);
        $tb.append(template);
      } else {
        console.log("mostramos row old ");
      }
    }
  };

  showHideTbody = function() {
    var btn;
    btn = this;
    if (this.value.length === 15) {
      $(".table" + this.value + " > tbody").toggle(function() {
        if ($(this).is(":hidden")) {
          return $(btn).find("span").removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down");
        } else {
          return $(btn).find("span").removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-up");
        }
      });
    } else {
      $("" + this.value).toggle(function() {
        if ($(this).is(":hidden")) {
          return $(btn).find("span").removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down");
        } else {
          return $(btn).find("span").removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-up");
        }
      });
    }
  };

  changeRdoNip = function() {
    var chk;
    chk = false;
    $(this).each(function() {
      if (this.checked) {
        chk = Boolean(parseInt(this.value));
        $(".chknipp" + ($(this).attr("data-mat"))).each(function() {
          this.checked = chk;
          $(this).change();
        });
      }
    });
  };

  chkNippChange = function() {
    var $td;
    if (this.value !== "") {
      $td = $("tr." + this.value + " > td");
      $td.eq(1).find("input").attr("disabled", !this.checked);
      calMeter(this.value.substring(0, 15));
    }
  };

  calMeter = function(matid) {
    var input, m;
    input = $(".meter" + matid);
    m = 0;
    $(".table" + matid + " > tbody > tr").each(function(index, element) {
      var $td, meter, quantity;
      $td = $(element).find("td");
      if ($td.eq(0).find("input").is(":checked")) {
        quantity = parseFloat($td.eq(1).find("input").val());
        meter = parseFloat($td.eq(6).text());
        return m += (quantity * meter) / 100;
      }
    });
    input.val(m);
  };

  valMax = function() {
    var $input, id, mat, max, val;
    $input = $(this);
    max = parseFloat($input.attr("max"));
    val = parseFloat($input.val());
    mat = $input.attr("data-mat");
    if (val > max) {
      $input.val(max);
    } else if (val < 1) {
      $input.val(1);
      id = $input.attr("data-id");
      $("tr." + mat + "nip" + id + " > td").eq(0).find("input").attr("checked", false).change();
    }
    calMeter(mat);
  };

  nextOrders = function() {
    var pass;
    pass = valQuantityPreOrders();
    if (pass) {
      $(".torders").fadeOut(400);
      $(".ordersbedside").fadeIn(800);
    } else {
      $().toastmessage("showWarningToast", "Existe campos vacios o con valor cero, esto es incorrecto.");
    }
  };

  backOrders = function() {
    $(".ordersbedside").fadeOut(400);
    $(".torders").fadeIn(800);
  };

  valQuantityPreOrders = function() {
    var pass;
    pass = false;
    $(".quantityOrders").each(function(index, element) {
      if (element.value === "" || element.value === 0 || element.value === "0") {
        pass = false;
      } else {
        pass = true;
      }
    });
    return pass;
  };

  updateCommentMat = function() {
    var data;
    data = new Object();
    data.pro = $("input[name=pro]").val();
    data.sub = $("input[name=sub]").val();
    data.sec = $("input[name=sec]").val();
    data.csrfmiddlewaretoken = $("input[name=csrfmiddlewaretoken]").val();
    data.comment = this.value;
    data.mat = $(this).attr("data-mat");
    data.upcomment = true;
    $.post("", data);
  };

  validOrders = function() {
    var data, detail, nipp, pass, pipe, tipo, x;
    data = new Object();
    detail = new Array();
    nipp = new Array();
    pipe = new Array();
    pass = false;
    $(".ordersbedside > .row").find("select,input").each(function() {
      if (this.value === "") {
        if (this.name !== "orderfile") {
          pass = false;
          data.elemet = this.name;
          return pass;
        }
      } else {
        if (this.name !== "orderfile" && this.name !== "") {
          data[this.name] = this.value;
          pass = true;
        }
      }
    });
    if (pass) {
      $(".quantityOrders").each(function(index, element) {
        if (element.value !== "" || element.value !== 0 || element.value !== "0") {
          detail.push({
            "idmat": element.getAttribute("data-mat"),
            "quantity": parseFloat(element.value),
            "comment": $("tr." + (element.getAttribute("data-mat"))).find("td").eq(11).find("input").val()
          });
          if (element.getAttribute("data-mat").substring(0, 3) === "115") {
            pipe.push(element.getAttribute("data-mat"));
          }
        }
      });
      if (pipe.length > 0) {
        tipo = new Object();
        $(".tn" + detail[0].idmat).find("option").each(function(index, element) {
          var text;
          text = $.trim(element.innerHTML);
          text = text.split("-");
          if (text.length === 2) {
            text = text[1];
          } else if (text.length === 3) {
            text = text[1] + "-" + text[2];
          }
          tipo[text] = element.value;
        });
        for (x in pipe) {
          $(".table" + pipe[x] + " > tbody > tr").each(function(index, element) {
            var $td, ar, met;
            $td = $(element).find("td");
            if ($td.eq(0).find("input").is(":checked")) {
              ar = $("tr.trnip" + ($td.eq(1).find("input").attr("data-id"))).find("td").eq(1).text().split(",");
              met = $("tr.trnip" + ($td.eq(1).find("input").attr("data-id"))).find("td").eq(4).text();
              nipp.push({
                "quantity": parseFloat($td.eq(1).find("input").val()),
                "idnip": $td.eq(1).find("input").attr("data-id"),
                "idmat": $td.eq(1).find("input").attr("data-mat"),
                "comment": $("tr.trnip" + ($td.eq(1).find("input").attr("data-id"))).find("td").eq(6).text(),
                "type": ar[1],
                "meter": met
              });
            }
          });
        }
      }
    }
    data.detail = JSON.stringify(detail);
    data.nipples = JSON.stringify(nipp);
    data.pass = pass;
    return data;
  };

  generateOrders = function() {
    var btn, data, val;
    val = validOrders();
    if (val.pass) {
      btn = this;
      data = new FormData();
      if ($("input[name=orderfile]").get(0).files.length > 0) {
        data.append("orderfile", $("input[name=orderfile]").get(0).files[0]);
      }
      data.append("obser", $("#obser_ifr").contents().find("body").html());
      data.append("proyecto", $("input[name=pro]").val());
      data.append("subproyecto", $("input[name=sub]").val());
      data.append("sector", $("input[name=sec]").val());
      data.append("csrfmiddlewaretoken", $("input[name=csrfmiddlewaretoken]").val());
      data.append("almacen", val.almacen);
      data.append("asunto", val.asunto);
      data.append("empdni", val.empdni);
      data.append("traslado", val.traslado);
      data.append("details", val.detail);
      data.append("nipples", val.nipples);
      data.append("saveorders", true);
      $.ajax({
        data: data,
        url: "",
        type: "POST",
        dataType: "json",
        cache: false,
        contentType: false,
        processData: false,
        beforeSend: function() {
          return $(btn).button("loading");
        },
        success: function(response) {
          if (response.status) {
            $(btn).button('loading');
            $().toastmessage("showNoticeToast", "Correcto! se a generado el pedido a almacén nro " + response.nro);
            return setTimeout(function() {
              return location.reload();
            }, 2600);
          } else {
            return $().toastmessage("showWarningToast", "No se a generado el pedido almacén, " + response.raise);
          }
        }
      });
      return;
    } else {
      $().toastmessage("showWarningToast", "existe un error de formatado, revise los campos del formulario");
    }
  };

  approvedAdditional = function(event) {
    $().toastmessage("showToast", {
      text: "Desea aprobar y pasar a producción esta lista de materiales?",
      sticky: true,
      type: "confirm",
      buttons: [
        {
          value: "Si"
        }, {
          value: "No"
        }
      ],
      success: function(result) {
        var arr, data;
        if (result === "Si") {
          data = new Object();
          arr = new Array();
          $("table.table-details > tbody > tr").each(function(index, element) {
            var $td;
            $td = $(element).find("td");
            arr.push({
              "materials": $td.eq(1).text(),
              "quantity": parseFloat($td.eq(7).text()),
              "price": parseFloat($td.eq(8).text()),
              "brand": $td.eq(9).find("button").eq(0).attr("data-brand"),
              "model": $td.eq(9).find("button").eq(0).attr("data-model")
            });
            console.log($td.eq(9).find("button").eq(0).attr("data-brand"));
          });
          data.csrfmiddlewaretoken = $("input[name=csrfmiddlewaretoken]").val();
          data.approvedadditional = true;
          data.details = JSON.stringify(arr);
          console.log(data);
          return $.post("", data, function(response) {
            if (response.status) {
              $().toastmessage("showNoticeToast", "Correcto se ha aprovado el sector.");
              return setTimeout(function() {
                return location.reload();
              }, 2600);
            } else {
              return $().toastmessage("showWarningToast", "No se a podido realizar la aprovación del sector.");
            }
          }, "json");
        }
      }
    });
  };

  showModify = function() {
    startModidfy();
    $(".table-details, .table-niple, .btn-update-meter").fadeOut(200);
    $(".panel-modify, .btn-update-meter-cancel, .btn-show-materials-meter, .btn-deductivo-meter, .btn-upload-plane-meter, .btn-save-modify-meter").fadeIn(680);
  };

  backModify = function() {
    $(".panel-modify, .btn-update-meter-cancel, .btn-show-materials-meter, .btn-deductivo-meter, .btn-upload-plane-meter, .btn-save-modify-meter").fadeOut(200);
    $(".table-details, .table-niple, .btn-update-meter").fadeIn(680);
  };

  startModidfy = function() {
    var data;
    data = new Object();
    data.csrfmiddlewaretoken = $("input[name=csrfmiddlewaretoken]").val();
    data.modifystart = true;
    $.post("", data, function(response) {
      var $sel, $tb, att, b, selectBrand, selectModel, template, x, _results;
      if (response.status) {
        $tb = $(".table-modify > tbody");
        $tb.empty();
        _results = [];
        for (x in response.details) {
          template = "<tr id=\"trm-{{ materials }}\"> <td class=\"text-center\">{{ item }}</td> <td class=\"text-center\">{{ materials }}</td> <td>{{ name }}</td> <td>{{ measure }}</td> <td class=\"text-center\">{{ unit }}</td> <td><select style=\"width: 80px;\" class=\"form-control input-sm\" id=\"brand-{{ materials }}\"</select></td> <td><select style=\"width: 80px;\" class=\"form-control input-sm\" id=\"model-{{ materials }}\"</select></td> <td><input style=\"width: 80px;\" type=\"number\" class=\"form-control input-sm\" value=\"{{ quantity }}\" min=\"0\" id=\"quantity-{{ materiales }}\"></td> <td><input style=\"width: 80px;\" type=\"number\" class=\"form-control input-sm\" value=\"{{ price }}\" id=\"price-{{ materials }}\"></td> <td>{{ amount }}</td> <td class=\"text-center\"> <button class=\"btn btn-xs btn-link text-green btn-update-update\" value=\"{{ materials }}\" data-tag=\"{{ tag }}\"> <span class=\"glyphicon glyphicon-edit\"></span> </button> </td> <td class=\"text-center\"> <button class=\"btn btn-xs btn-link text-red btn-delete-update\" value=\"{{ materials }}\"> <span class=\"glyphicon glyphicon-trash\"></span> </button> </td> <td class=\"text-center\">{{!attend}}</td> </tr>";
          response.details[x].item = parseInt(x) + 1;
          att = "";
          if (response.details[x].tag === "2") {
            att = "<span class=\"glyphicon glyphicon-check\"></span>";
          } else if (response.details[x].tag === "0") {
            att = "<span class=\"glyphicon glyphicon-unchecked\"></span>";
          }
          template = template.replace("{{!attend}}", att);
          $tb.append(Mustache.render(template, response.details[x]));
          $sel = $("#brand-" + response.details[x].materials);
          $sel.empty();
          for (b in response.listBrand) {
            selectBrand = "<option value=\"{{ brand_id }}\" {{!sel}}>{{ brand }}</option>";
            if (response.listBrand[b].brand_id === response.details[x].brand_id) {
              selectBrand = selectBrand.replace("{{!sel}}", "selected");
            }
            $sel.append(Mustache.render(selectBrand, response.listBrand[b]));
          }
          $sel = $("#model-" + response.details[x].materials);
          $sel.empty();
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (b in response.listModel) {
              selectModel = "<option value=\"{{ model_id }}\" {{!sel}}>{{ model }}</option>";
              if (response.listModel[b].model_id === response.details[x].model_id) {
                selectModel = selectModel.replace("{{!sel}}", "selected");
              }
              _results1.push($sel.append(Mustache.render(selectModel, response.listModel[b])));
            }
            return _results1;
          })());
        }
        return _results;
      } else {
        return $().toastmessage("showErrorToast", "No se puede traer la modificación para este sector.");
      }
    }, "json");
  };

  validBlurNumber = function() {
    var pass, val;
    pass = false;
    val = this.value;
    val = val.replace(",", ".");
    val = parseFloat(val);
    if (!isNaN(val)) {
      if (val < 0) {
        $().toastmessage("showWarningToast", "El monto ingresado tiene que ser mayor a 0.");
        this.value = 0;
      } else {
        pass = true;
      }
    } else {
      $().toastmessage("showErrorToast", "Solo se aceptan Digitos.");
      this.value = 0;
      pass = false;
    }
    return pass;
  };

  updateMaterialUpdateMeter = function() {
    var $td, data, material;
    material = this.value;
    $td = $("table.table-modify > tbody > tr#trm-" + material + " > td");
    data = new Object();
    data.materials = material;
    data.brand = $td.eq(5).find("select").val();
    data.model = $td.eq(6).find("select").val();
    data.quantity = $td.eq(7).find("input").val().replace(",", ".");
    data.price = $td.eq(8).find("input").val().replace(",", ".");
    data.updatematerialMeter = true;
    data.csrfmiddlewaretoken = $("input[name=csrfmiddlewaretoken]").val();
    console.log(data);
    $.post("", data, function(response) {
      var tot;
      if (response.status) {
        tot = parseFloat(data.quantity) * parseFloat(data.price);
        return $td.eq(9).text(tot.toFixed(2));
      } else {
        return $().toastmessage("showErrorToast", "No se a podido modificar el material.");
      }
    }, "json");
  };

  deleteMaterialUpdateMeter = function() {
    var material;
    material = this.value;
    $().toastmessage("showToast", {
      text: "Realmente desea eliminar el material " + this.value + "?",
      type: "confirm",
      sticky: true,
      buttons: [
        {
          value: "Si"
        }, {
          value: "No"
        }
      ],
      success: function(result) {
        var data;
        if (result === "Si") {
          data = new Object();
          data.materials = material;
          data.deletematerialMeter = true;
          data.csrfmiddlewaretoken = $("input[name=csrfmiddlewaretoken]").val();
          console.log(data);
          return $.post("", data, function(response) {
            if (response.status) {
              return startModidfy();
            } else {
              return $().toastmessage("showErrorToast", "No se a podido eliminar el material.");
            }
          }, "json");
        }
      }
    });
  };

  addMaterialUpdateMeter = function() {
    var currency, data, purchase;
    data = new Object();
    data.csrfmiddlewaretoken = $("[name=csrfmiddlewaretoken]").val();
    data.addupdatemeter = true;
    data.materials = $(".id-mat").text();
    data.quantity = $("input[name=cantidad]").val();
    data.quantity = parseFloat(data.quantity.replace(",", "."));
    data.price = $("input[name=precio]").val();
    data.price = parseFloat(data.price.replace(",", "."));
    data.brand = $("select[name=brand]").val();
    data.model = $("select[name=model]").val();
    if (data.materials !== "" && data.quantity !== "" && data.price !== "") {
      currency = $("select[name=moneda]").val();
      if ($("[name=currency]").val() !== currency) {
        if ($("[name=" + ($("[name=currency]").val()) + "]").val() === null || $("[name=" + ($("[name=currency]").val()) + "]").val() === void 0) {
          $().toastmessage("showWarningToast", "El tipo de cambio no esta registrado.");
          return false;
        }
        purchase = $("[name=" + ($("[name=currency]").val()) + "]").val();
        data['price'] = data['price'] * parseFloat(purchase);
      }
      $.post("", data, function(response) {
        if (response.status) {
          return startModidfy();
        } else {
          return $().toastmessage("showErrorToast", "No found Transaction " + response.raise);
        }
      }, "json");
      return;
    } else {
      $().toastmessage("showWarningToast", "Existe campos vacio.");
    }
  };

  createTableDeductive = function(event) {
    var $tb, amount, i, j, price, quanmof, quanori, quantity, table, tbla, tblb, template, tre, x;
    tbla = new Array();
    tblb = new Array();
    $("table.table-details > tbody > tr").each(function(index, element) {
      var $td;
      $td = $(element).find("td");
      return tbla.push({
        "materials": $td.eq(2).text(),
        "name": $td.eq(3).text(),
        "measure": $td.eq(4).text(),
        "unit": $td.eq(5).text(),
        "brand": $td.eq(6).text(),
        "model": $td.eq(7).text(),
        "quantity": $td.eq(8).text(),
        "price": $td.eq(10).text()
      });
    });
    $("table.table-modify > tbody > tr").each(function(index, element) {
      var $td;
      $td = $(element).find("td");
      return tblb.push({
        "materials": $td.eq(1).text(),
        "name": $td.eq(2).text(),
        "measure": $td.eq(3).text(),
        "unit": $td.eq(4).text(),
        "brand": $td.eq(5).find("select").val(),
        "model": $td.eq(6).find("select").val(),
        "quantity": $td.eq(7).find("input").val(),
        "price": $td.eq(8).find("input").val()
      });
    });
    table = new Array();
    console.warn(tblb.length);
    for (i in tblb) {
      tre = 0;
      for (j in tbla) {
        if (tblb[i].materials === tbla[j].materials) {
          quanori = parseFloat(tblb[i].quantity);
          quanmof = parseFloat(tbla[j].quantity);
          if (quanori !== quanmof) {
            quantity = 0;
            price = 0;
            if (quanori > quanmof) {
              quantity = parseFloat(tblb[i].quantity) - parseFloat(tbla[i].quantity);
              console.log("quantity original");
            } else if (quanmof > quanori) {
              quantity = parseFloat(tbla[i].quantity) - parseFloat(tblb[i].quantity);
              console.warn("quantity modifid");
            } else {
              console.error("quantity default");
              continue;
            }
            console.warn(quantity);
            if (quantity > 0) {
              console.info("append table materials exists");
              amount = parseFloat(tbla[j].quantity) * parseFloat(tbla[j].price);
              table.push({
                "materials": tbla[j].materials,
                "name": tbla[j].name,
                "measure": tbla[j].measure,
                "unit": tbla[j].unit,
                "brand": tbla[j].brand,
                "model": tbla[j].model,
                "quantity": quantity,
                "price": tbla[j].price,
                "amount": amount.toFixed(2)
              });
            }
          }
        } else {
          tre++;
        }
      }
      if ((tbla.length - 1) !== tre) {
        amount = parseFloat(tblb[i].quantity) * parseFloat(tblb[i].price);
        table.push({
          "materials": tblb[i].materials,
          "name": tblb[i].name,
          "measure": tblb[i].measure,
          "unit": tblb[i].unit,
          "brand": tblb[i].brand,
          "model": tblb[i].model,
          "quantity": parseFloat(tblb[i].quantity),
          "price": tblb[i].price,
          "amount": amount.toFixed(2)
        });
      }
    }
    console.log(table);
    if (table.length) {
      console.log("ingreso a mostrar deductive");
      console.table(table);
      template = "<tr> <td> <input type=\"checkbox\" name=\"\"> </td> <td>{{ materials }}</td> <td>{{ name }}</td> <td>{{ measure }}</td> <td>{{ unit }}</td> <td>{{ brand }}</td> <td>{{ model }}</td> <td>{{ quantity }}</td> <td>{{ price }}</td> <td>{{ amount }}</td> <td> <div class=\"input-group\" style=\"width: 160px;\"> <input type=\"text\" class=\"form-control input-sm\" readonly> <span class=\"input-group-btn\"> <button class=\"btn btn btn-default btn-sm btn-deductive-meter-select\"> <span class=\"glyphicon glyphicon-edit\"></span> </button> </span> </div> </td> </tr>";
      $tb = $("table.table-deductive > tbody");
      $tb.empty();
      for (x in table) {
        $tb.append(Mustache.render(template, table[x]));
      }
      $("table.table-modify > tbody > tr > td").find("input, select, button").attr("disabled", true);
      $(".btn-show-materials-meter, .btn-upload-plane-meter").attr("disabled", true);
      $(".deductive-one").fadeIn(800);
      $(".deductive-one").ScrollTo({
        duration: 800
      });
      $tb = $("table.table-select-deductive-meter > tbody");
      $tb.empty();
      template = "<tr> <td>{{ item }}</td> <td>{{ materials }}</td> <td>{{ name }}</td> <td>{{ measure }}</td> <td>{{ unit }}</td> <td>{{ brand }}</td> <td>{{ model }}</td> <td>{{ quantity }}</td> <td class=\"text-center\"> <input type=\"checkbox\" data-mat=\"{{ materials }}\" data-brnad=\"{{ brand }}\" data-model=\"{{ model }}\"> </td> </tr>";
      for (x in tbla) {
        tbla[x].item = parseInt(x) + 1;
        $tb.append(Mustache.render(template, tbla[x]));
      }
    } else {
      $().toastmessage("showWarningToast", "No se han encontrado diferencias entre las modificaciones");
    }
  };

  deductiveOneCancel = function(event) {
    $("table.table-modify > tbody > tr > td").find("input, select, buttons").attr("disabled", false);
    $(".btn-show-materials-meter, .btn-upload-plane-meter").attr("disabled", false);
    $(".deductive-one").fadeOut(800);
    $(".nav-tabs").ScrollTo({
      duration: 800
    });
  };

  showaddtableoutdeductivemeter = function(event) {
    $(".mdeductivereplace").modal("show");
  };

  changeSelectDeductiveMeter = function(event) {
    $("[name=dedmeterradio]").each(function() {
      if (this.checked) {
        return $().each(function() {});
      }
    });
  };

}).call(this);
